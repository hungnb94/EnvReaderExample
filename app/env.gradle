import java.util.regex.Matcher
import java.util.regex.Pattern

static boolean isComment(String str) {
    return str.startsWith("#") || str.startsWith("////")
}

static boolean isBlank(String str) {
    return str == null || str.trim().isEmpty()
}

static boolean isQuoted(String str) {
    return str.startsWith("\"") && str.endsWith("\"")
}

static String normalizeValue(String value) {
    String tr = value.trim()
    return isQuoted(tr)
            ? tr.substring(1, value.length() -1)
            : tr
}

static String readFile(String path) {
    try {
        return new File(path).text
    } catch(FileNotFoundException ex) {
        ex.printStackTrace()
        return null
    }
}

Map<String, String> envVariables = new HashMap<>()

String fileContents = readFile('app/src/main/resources/env') ?: ""
StringTokenizer tokenizer = new StringTokenizer(fileContents, "\n")

Pattern whiteSpacePattern = Pattern.compile("^\\s*\$")
Pattern parseLinePattern = Pattern.compile("^\\s*([\\w.\\-]+)\\s*(=)\\s*(.*)?\\s*\$")

while (tokenizer.hasMoreElements()) {
    String l = tokenizer.nextElement()
    if (whiteSpacePattern.matcher(l).matches() || isComment(l) || isBlank(l)) continue

    Matcher matcher = parseLinePattern.matcher(l)
    if (matcher.matches()) {
        String key = matcher.group(1)
        String value = normalizeValue(matcher.group(3))
        envVariables.put(key, value)
    }
}

ext {
    env = envVariables
}
